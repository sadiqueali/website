<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Sadique Ali</title>
    <link>http://sadique.io/tags/java/index.xml</link>
    <description>Recent content on Sadique Ali</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <atom:link href="http://sadique.io/tags/java/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Handling Deserialization errors in Spring Redis Sessions</title>
      <link>http://sadique.io/blog/2016/11/02/handling-deserialization-errors-in-spring-redis-sessions/</link>
      <pubDate>Wed, 02 Nov 2016 13:10:33 -0700</pubDate>
      
      <guid>http://sadique.io/blog/2016/11/02/handling-deserialization-errors-in-spring-redis-sessions/</guid>
      <description>&lt;p&gt;One of the challenges of using storing spring sessions in Redis is that the objects that gets stored as part of a session often undergoes changes as the application evolves and these changes cause de-serialization exceptions to be thrown after a deployment when a session created before the deployment is presented to the application. This blog post discusses a method to work around this issue.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;the-issue&#34;&gt;The issue&lt;/h2&gt;

&lt;p&gt;Consider an application that uses a custom authentication service to validate credentials presented by a client. To achieve this, we will wire up a custom authentication provider which creates an object &lt;code&gt;Customer&lt;/code&gt; as the authenticated user in session.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class Customer extends User {
  public Customer(String name) {
    super(name, &amp;quot;&amp;quot;, Collections.singletonList(new SimpleGrantedAuthority(&amp;quot;USER&amp;quot;)));
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Things work great, but after a while the team decides to store the logged in user&amp;rsquo;s email address in the session. To achieve this, we change the &lt;code&gt;Customer&lt;/code&gt; type to:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class Customer extends User {
  private String email;

  public Customer(String name, String email) {
    super(name, &amp;quot;&amp;quot;, Collections.singletonList(new SimpleGrantedAuthority(&amp;quot;USER&amp;quot;)));
    this.email = email;
  }

  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When this code is deployed and a user tries to access a protected resource by presenting a session created before the deployment, an exception is thrown.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;org.springframework.data.redis.serializer.SerializationException: Cannot deserialize; nested exception is org.springframework.core.serializer.support.SerializationFailedException: Failed to deserialize payload. Is the byte array a result of corresponding serialization for DefaultDeserializer?; nested exception is java.io.InvalidClassException: in.sdqali.spring.vo.Customer; local class incompatible: stream classdesc serialVersionUID = 5161850915957547690, local class serialVersionUID = 1045726772100761661
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This happens because the serialized object in the session and the current structure of the session differ.&lt;/p&gt;

&lt;h2 id=&#34;solutions&#34;&gt;Solutions&lt;/h2&gt;

&lt;p&gt;This issue was raised on the Spring Session issue tracker &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; and there were a lot of work-arounds discussed. Of the work arounds, wrapping the session repository offers the least disruption to the end user.
This approach ensures that every time a de-serialization error is thrown while trying to read an object from the session, that object is deleted, preventing subsequent errors.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class SafeDeserializationRepository&amp;lt;S extends ExpiringSession&amp;gt; implements SessionRepository&amp;lt;S&amp;gt; {
  private final SessionRepository&amp;lt;S&amp;gt; delegate;
  private final RedisTemplate&amp;lt;Object, Object&amp;gt; redisTemplate;

  private static final String BOUNDED_HASH_KEY_PREFIX = &amp;quot;spring:session:sessions:&amp;quot;;
  private static final Logger logger = getLogger(SafeDeserializationRepository.class);

  public SafeDeserializationRepository(SessionRepository&amp;lt;S&amp;gt; delegate,
                                       RedisTemplate&amp;lt;Object, Object&amp;gt; redisTemplate) {
    this.delegate = delegate;
    this.redisTemplate = redisTemplate;
  }

  @Override
  public S createSession() {
    return delegate.createSession();
  }

  @Override
  public void save(S session) {
    delegate.save(session);
  }

  @Override
  public S getSession(String id) {
    try {
      return delegate.getSession(id);
    } catch(SerializationException e) {
      logger.info(&amp;quot;Deleting non-deserializable session with key {}&amp;quot;, id);
      redisTemplate.delete(BOUNDED_HASH_KEY_PREFIX + id);
      return null;
    }
  }

  @Override
  public void delete(String id) {
    delegate.delete(id);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However, it is not easy to wire up this repository in the configuration. Since Spring Redis Session is auto configured, the only way to override beans for Redis Session is to extend &lt;code&gt;RedisHttpSessionConfiguration&lt;/code&gt; and specify beans. Ideally, we want to override the method &lt;code&gt;org.springframework.session.data.redis.config.annotation.web.http.RedisHttpSessionConfiguration#sessionRepository&lt;/code&gt;. This would mean that &lt;code&gt;SafeDeserializationRepository&lt;/code&gt; inherits from &lt;code&gt;RedisOperationsSessionRepository&lt;/code&gt;. That does not sound too complicated till you realize that &lt;code&gt;org.springframework.session.data.redis.RedisOperationsSessionRepository#getSession(java.lang.String)&lt;/code&gt; returns &lt;code&gt;RedisSession&lt;/code&gt; which is a final class declared inside &lt;code&gt;RedisOperationsSessionRepository&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;On closer look, the repository is hooked in to &lt;code&gt;SessionRepositoryFilter&lt;/code&gt; and it is indeed possible to override the &lt;code&gt;org.springframework.session.config.annotation.web.http.SpringHttpSessionConfiguration#springSessionRepositoryFilter&lt;/code&gt; method to create a new filter that takes our &lt;code&gt;SafeDeserializationRepository&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@Configuration
public class RedisSessionConfig extends RedisHttpSessionConfiguration {
  @Autowired
  RedisTemplate&amp;lt;Object, Object&amp;gt; redisTemplate;

  @Bean
  @Override
  public &amp;lt;S extends ExpiringSession&amp;gt; SessionRepositoryFilter&amp;lt;? extends ExpiringSession&amp;gt; springSessionRepositoryFilter(SessionRepository&amp;lt;S&amp;gt; sessionRepository) {
    return super.springSessionRepositoryFilter(new SafeDeserializationRepository&amp;lt;&amp;gt;(sessionRepository, redisTemplate));
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There is an example of using this approach &lt;a href=&#34;https://github.com/sadiqueali/safe-spring-redis-session&#34;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;&lt;a href=&#34;https://github.com/spring-projects/spring-session/issues/280&#34;&gt;SerializationFailedException after re-deploying with changed session object #280&lt;/a&gt;.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description>
    </item>
    
  </channel>
</rss>